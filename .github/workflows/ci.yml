name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  FLUTTER_VERSION: '3.13.0'
  GO_VERSION: '1.21'
  RUST_VERSION: '1.72'
  NODE_VERSION: '18'

jobs:
  # Flutter Tests
  flutter-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
    
    - name: Install dependencies
      working-directory: ./frontend
      run: flutter pub get
    
    - name: Run tests
      working-directory: ./frontend
      run: flutter test
    
    - name: Check formatting
      working-directory: ./frontend
      run: dart format --set-exit-if-changed .
    
    - name: Analyze code
      working-directory: ./frontend
      run: flutter analyze

  # Go Tests
  go-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth-service, user-service, dashboard-service]
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Run tests
      working-directory: ./backend/services/${{ matrix.service }}
      run: |
        go test -v ./...
        go vet ./...
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: ./backend/services/${{ matrix.service }}

  # Rust Tests
  rust-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run tests
      working-directory: ./backend/analytics-engine
      run: |
        cargo test --all-features
        cargo clippy -- -D warnings
    
    - name: Check formatting
      working-directory: ./backend/analytics-engine
      run: cargo fmt -- --check

  # Build Docker Images
  docker-build:
    runs-on: ubuntu-latest
    needs: [flutter-test, go-test, rust-test]
    strategy:
      matrix:
        service: [api-gateway, analytics-engine]
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./backend/${{ matrix.service }}
        push: false
        tags: financial-analytics/${{ matrix.service }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'